#!/bin/zsh

export HISTFILE=~/.zsh_history

search_terms=()
search_mode="-c"

# Function to display usage instructions
usage() {
    echo "Usage: hifi [-w|-c] <term1> [<term2> ... <termN>]"
    echo "Options:"
    echo "  -w    Search for commands containing all terms with word boundaries"
    echo "  -c    Search for commands containing all terms (default)"
    exit 1
}

# Function to perform search using grep and sequential filtering
hifigrep() {
    local search_terms=("$@")
    local first_term="${search_terms[1]}"
    local result

    # Search for the first term with or without word boundaries
    result=$(grep -E "$first_term" "$HISTFILE")

    echo "Size after searching for $first_term: $(echo "$result" | wc -l)"

    # Loop through the remaining terms
    for ((i = 2; i <= ${#search_terms[@]}; i++)); do
        local term="${search_terms[i]}"        
        # Search for the term with or without word boundaries
        temp_result=$(echo "$result" | grep -E "$term")
	
        echo "Size after searching for $term: $(echo "$temp_result" | wc -l)"
        result="$temp_result"
    done

    echo "$result"
}

# Process command line arguments
while getopts "wc" opt; do
    case $opt in
        w) search_mode="-w";;
        c) search_mode="-c";;
        *) usage;;
    esac
done
shift $((OPTIND-1))

# Check if at least one search term is provided
if [ $# -eq 0 ]; then
    echo "Error: At least one search term is required."
    usage
fi

# Store the search terms in an array
search_terms=("$@")

# Adjust patterns based on search mode
if [ "$search_mode" = "-w" ]; then
    for ((i = 1; i <= ${#search_terms[@]}; i++)); do
        search_terms[i]="\\b${search_terms[i]}\\b"
    done
fi

# Read history file and perform search
if [ -f "$HISTFILE" ]; then
    hifigrep "${search_terms[@]}"
else
    echo "History file not found."
fi

